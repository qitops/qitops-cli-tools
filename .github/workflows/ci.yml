name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build with AI features
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features ai

      - name: Test AI features with mock
        run: |
          chmod +x test_ai_features_mock.sh
          ./test_ai_features_mock.sh

      # Documentation build steps
      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: 'latest'

      - name: Prepare docs directory
        run: |
          # Clean up specific problematic files
          rm -rf docs/*.html docs/index.md#*

          # Copy main files if they don't exist in docs
          [ -f docs/index.md ] || cp README.md docs/index.md
          [ -f docs/changelog.md ] || cp CHANGELOG.md docs/changelog.md 2>/dev/null || echo "# Changelog" > docs/changelog.md
          [ -f docs/roadmap.md ] || cp ROADMAP.md docs/roadmap.md 2>/dev/null || echo "# Roadmap" > docs/roadmap.md
          [ -f docs/contributing.md ] || cp CONTRIBUTING.md docs/contributing.md 2>/dev/null || echo "# Contributing" > docs/contributing.md
          [ -f docs/LICENSE.md ] || cp LICENSE docs/LICENSE.md 2>/dev/null || echo "# License" > docs/LICENSE.md

          # Create SUMMARY.md if it doesn't exist
          if [ ! -f docs/SUMMARY.md ]; then
            echo '# Summary' > docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '[QitOps: The Ultimate QA CLI Tool](index.md)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '# User Guide' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '- [Why QitOps?](index.md#why-qitops)' >> docs/SUMMARY.md
            echo '- [Installation](index.md#installation)' >> docs/SUMMARY.md
            echo '- [Quick Start](index.md#quick-start)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '# Core Features' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '- [API Testing](index.md#api-testing)' >> docs/SUMMARY.md
            echo '- [API Collections](index.md#api-collections)' >> docs/SUMMARY.md
            echo '- [Performance Testing](index.md#performance-testing)' >> docs/SUMMARY.md
            echo '- [Security Testing](index.md#security-testing)' >> docs/SUMMARY.md
            echo '- [Web Testing](index.md#web-testing)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '# AI-Powered Testing' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '- [AI Features Overview](ai-features.md)' >> docs/SUMMARY.md
            echo '- [Test Generation](ai-features.md#test-configuration-generation)' >> docs/SUMMARY.md
            echo '- [Results Analysis](ai-features.md#test-results-analysis)' >> docs/SUMMARY.md
            echo '- [Improvement Suggestions](ai-features.md#improvement-suggestions)' >> docs/SUMMARY.md
            echo '- [Local LLM Support](ai-features.md#supported-llm-models)' >> docs/SUMMARY.md
            echo '- [Testing AI Features](testing-ai-features.md)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '# Using QitOps' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '- [Usage Guide](usage.md)' >> docs/SUMMARY.md
            echo '- [Configuration](configuration.md)' >> docs/SUMMARY.md
            echo '- [Best Practices](best-practices.md)' >> docs/SUMMARY.md
            echo '- [CI/CD Integration](index.md#cicd-integration)' >> docs/SUMMARY.md
            echo '- [Data-Driven Testing](index.md#data-driven-testing)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '# Project Information' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '- [Roadmap](roadmap.md)' >> docs/SUMMARY.md
            echo '- [Changelog](changelog.md)' >> docs/SUMMARY.md
            echo '- [Contributing](contributing.md)' >> docs/SUMMARY.md
            echo '- [License](LICENSE.md)' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '---' >> docs/SUMMARY.md
            echo '' >> docs/SUMMARY.md
            echo '[Documentation Setup](GITHUB_PAGES.md)' >> docs/SUMMARY.md
          fi

          # Update book.toml
          echo '[book]' > docs/book.toml
          echo 'authors = ["Jonathan Opperman"]' >> docs/book.toml
          echo 'language = "en"' >> docs/book.toml
          echo 'multilingual = false' >> docs/book.toml
          echo 'src = "."' >> docs/book.toml
          echo 'title = "QitOps Documentation"' >> docs/book.toml
          echo '' >> docs/book.toml
          echo '[output.html]' >> docs/book.toml
          echo 'git-repository-url = "https://github.com/qitops/qitops-cli-tools"' >> docs/book.toml
          echo 'git-repository-icon = "fa-github"' >> docs/book.toml
          echo 'edit-url-template = "https://github.com/qitops/qitops-cli-tools/edit/master/docs/{path}"' >> docs/book.toml
          echo 'site-url = "/qitops-cli-tools/"' >> docs/book.toml
          echo 'additional-css = ["custom.css"]' >> docs/book.toml
          echo 'additional-js = ["custom.js"]' >> docs/book.toml
          echo 'mathjax-support = false' >> docs/book.toml
          echo 'copy-fonts = true' >> docs/book.toml
          echo 'no-section-label = false' >> docs/book.toml
          echo 'preferred-dark-theme = "navy"' >> docs/book.toml
          echo 'smart-punctuation = true' >> docs/book.toml
          echo 'search-enabled = true' >> docs/book.toml
          echo 'search-js = true' >> docs/book.toml
          echo '' >> docs/book.toml
          echo '[output.html.fold]' >> docs/book.toml
          echo 'enable = true' >> docs/book.toml
          echo 'level = 0' >> docs/book.toml
          echo '' >> docs/book.toml
          echo '[output.html.playground]' >> docs/book.toml
          echo 'editable = true' >> docs/book.toml
          echo 'line-numbers = true' >> docs/book.toml
          echo 'runnable = false' >> docs/book.toml
          echo '' >> docs/book.toml
          echo '[output.html.search]' >> docs/book.toml
          echo 'limit-results = 20' >> docs/book.toml
          echo 'use-boolean-and = true' >> docs/book.toml
          echo 'boost-title = 2' >> docs/book.toml
          echo 'boost-hierarchy = 2' >> docs/book.toml
          echo 'boost-paragraph = 1' >> docs/book.toml
          echo 'expand = true' >> docs/book.toml
          echo 'heading-split-level = 3' >> docs/book.toml
          echo 'copy-js = true' >> docs/book.toml

          # Ensure custom CSS and JS files exist
          if [ ! -f docs/custom.css ]; then
            touch docs/custom.css
          fi
          if [ ! -f docs/custom.js ]; then
            touch docs/custom.js
          fi

          # List all files in docs directory for debugging
          echo "Files in docs directory:"
          ls -la docs/

      - name: Build documentation
        run: |
          cd docs
          mdbook build
